/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FrontmatterAliasDisplay
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FrontmatterAliasDisplay = class extends import_obsidian.Plugin {
  displayAliases() {
    var _a, _b, _c, _d;
    const fileExplorer = app.workspace.getLeavesOfType("file-explorer")[0];
    let files = fileExplorer.view.fileItems;
    for (const file of Object.values(files)) {
      if (file.file) {
        const aliasDiv = file.selfEl.querySelector(".file-alias");
        if (aliasDiv) {
          aliasDiv.remove();
        }
        let aliases = (_b = (_a = app.metadataCache.getFileCache(file.file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.aliases;
        let alias = (_d = (_c = app.metadataCache.getFileCache(file.file)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.alias;
        let aliasContent = alias ? alias : aliases;
        file.selfEl.createEl("div", { text: aliasContent, cls: "file-alias nav-file-title-content" });
      }
    }
  }
  async onload() {
    app.workspace.onLayoutReady(this.displayAliases);
    app.workspace.on("layout-change", this.displayAliases);
    app.workspace.on("editor-change", this.displayAliases);
  }
  onunload() {
    const fileExplorer = app.workspace.getLeavesOfType("file-explorer")[0];
    let files = fileExplorer.view.fileItems;
    for (const file of Object.values(files)) {
      if (file.file) {
        const aliasDiv = file.selfEl.querySelector(".file-alias");
        if (aliasDiv) {
          aliasDiv.remove();
        }
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGcm9udG1hdHRlckFsaWFzRGlzcGxheSBleHRlbmRzIFBsdWdpbiB7XG5cdGRpc3BsYXlBbGlhc2VzKCkge1xuXHRcdGNvbnN0IGZpbGVFeHBsb3JlciA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdmaWxlLWV4cGxvcmVyJylbMF07XG5cdFx0bGV0IGZpbGVzID0gZmlsZUV4cGxvcmVyLnZpZXcuZmlsZUl0ZW1zO1xuXHRcdGZvciAoY29uc3QgZmlsZSBvZiBPYmplY3QudmFsdWVzKGZpbGVzKSkge1xuXHRcdFx0aWYgKGZpbGUuZmlsZSkge1xuXG5cdFx0XHRcdGNvbnN0IGFsaWFzRGl2ID0gZmlsZS5zZWxmRWwucXVlcnlTZWxlY3RvcignLmZpbGUtYWxpYXMnKVxuXHRcdFx0XHRpZiAoIGFsaWFzRGl2ICkge1xuXHRcdFx0XHRcdGFsaWFzRGl2LnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGFsaWFzZXMgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZS5maWxlKT8uZnJvbnRtYXR0ZXI/LmFsaWFzZXM7XG5cdFx0XHRcdGxldCBhbGlhcyA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlLmZpbGUpPy5mcm9udG1hdHRlcj8uYWxpYXM7XG5cbiAgICAgICAgICAgICAgICBsZXQgYWxpYXNDb250ZW50ID0gYWxpYXMgPyBhbGlhcyA6IGFsaWFzZXM7XG5cdFx0XHRcdGZpbGUuc2VsZkVsLmNyZWF0ZUVsKCdkaXYnLCB7dGV4dDogYWxpYXNDb250ZW50LCBjbHM6ICdmaWxlLWFsaWFzIG5hdi1maWxlLXRpdGxlLWNvbnRlbnQnfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KHRoaXMuZGlzcGxheUFsaWFzZXMpO1xuXHRcdGFwcC53b3Jrc3BhY2Uub24oXCJsYXlvdXQtY2hhbmdlXCIsIHRoaXMuZGlzcGxheUFsaWFzZXMpO1xuXHRcdGFwcC53b3Jrc3BhY2Uub24oXCJlZGl0b3ItY2hhbmdlXCIsIHRoaXMuZGlzcGxheUFsaWFzZXMpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdFx0Y29uc3QgZmlsZUV4cGxvcmVyID0gYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ2ZpbGUtZXhwbG9yZXInKVswXTtcblx0XHRsZXQgZmlsZXMgPSBmaWxlRXhwbG9yZXIudmlldy5maWxlSXRlbXM7XG5cdFx0Zm9yIChjb25zdCBmaWxlIG9mIE9iamVjdC52YWx1ZXMoZmlsZXMpKSB7XG5cdFx0XHRpZiAoZmlsZS5maWxlKSB7XG5cdFx0XHRcdGNvbnN0IGFsaWFzRGl2ID0gZmlsZS5zZWxmRWwucXVlcnlTZWxlY3RvcignLmZpbGUtYWxpYXMnKVxuXHRcdFx0XHRpZiAoIGFsaWFzRGl2ICkge1xuXHRcdFx0XHRcdGFsaWFzRGl2LnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUV2QixJQUFxQiwwQkFBckIsY0FBcUQsdUJBQU87QUFBQSxFQUMzRCxpQkFBaUI7QUFIbEI7QUFJRSxVQUFNLGVBQWUsSUFBSSxVQUFVLGdCQUFnQixlQUFlLEVBQUUsQ0FBQztBQUNyRSxRQUFJLFFBQVEsYUFBYSxLQUFLO0FBQzlCLGVBQVcsUUFBUSxPQUFPLE9BQU8sS0FBSyxHQUFHO0FBQ3hDLFVBQUksS0FBSyxNQUFNO0FBRWQsY0FBTSxXQUFXLEtBQUssT0FBTyxjQUFjLGFBQWE7QUFDeEQsWUFBSyxVQUFXO0FBQ2YsbUJBQVMsT0FBTztBQUFBLFFBQ2pCO0FBRUEsWUFBSSxXQUFVLGVBQUksY0FBYyxhQUFhLEtBQUssSUFBSSxNQUF4QyxtQkFBMkMsZ0JBQTNDLG1CQUF3RDtBQUN0RSxZQUFJLFNBQVEsZUFBSSxjQUFjLGFBQWEsS0FBSyxJQUFJLE1BQXhDLG1CQUEyQyxnQkFBM0MsbUJBQXdEO0FBRXhELFlBQUksZUFBZSxRQUFRLFFBQVE7QUFDL0MsYUFBSyxPQUFPLFNBQVMsT0FBTyxFQUFDLE1BQU0sY0FBYyxLQUFLLG9DQUFtQyxDQUFDO0FBQUEsTUFDM0Y7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2QsUUFBSSxVQUFVLGNBQWMsS0FBSyxjQUFjO0FBQy9DLFFBQUksVUFBVSxHQUFHLGlCQUFpQixLQUFLLGNBQWM7QUFDckQsUUFBSSxVQUFVLEdBQUcsaUJBQWlCLEtBQUssY0FBYztBQUFBLEVBQ3REO0FBQUEsRUFFQSxXQUFXO0FBQ1YsVUFBTSxlQUFlLElBQUksVUFBVSxnQkFBZ0IsZUFBZSxFQUFFLENBQUM7QUFDckUsUUFBSSxRQUFRLGFBQWEsS0FBSztBQUM5QixlQUFXLFFBQVEsT0FBTyxPQUFPLEtBQUssR0FBRztBQUN4QyxVQUFJLEtBQUssTUFBTTtBQUNkLGNBQU0sV0FBVyxLQUFLLE9BQU8sY0FBYyxhQUFhO0FBQ3hELFlBQUssVUFBVztBQUNmLG1CQUFTLE9BQU87QUFBQSxRQUNqQjtBQUFBLE1BQ0Q7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
